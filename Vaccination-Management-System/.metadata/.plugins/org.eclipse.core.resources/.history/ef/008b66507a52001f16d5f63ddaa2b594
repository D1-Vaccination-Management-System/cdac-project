package com.app.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.app.dto.DoctorDto;
import com.app.exception.ApiException;
import com.app.exception.ResourceNotFoundException;
import com.app.service.IDoctorService;

@RestController
@RequestMapping("/doctor")
public class DoctorController {

	@Autowired
	private IDoctorService doctorService;

	/**
	 * Endpoint to add a new doctor.
	 * 
	 * @param doctorDto Data Transfer Object for doctor details.
	 * @return ResponseEntity containing the created Doctor details.
	 */
	@PostMapping("/add-doctor")
	public ResponseEntity<?> addDoctorDetails(@RequestBody DoctorDto doctorDto) {
		try {
			DoctorDto createdDoctor = doctorService.addDoctorDetails(doctorDto);
			return ResponseEntity.status(HttpStatus.CREATED).body(createdDoctor);
		} catch (ApiException e) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new ApiResponse(e.getMessage()));
		}
	}

	/**
	 * Endpoint to update doctor details.
	 * 
	 * @param doctorDto Data Transfer Object for updated doctor details.
	 * @return ResponseEntity containing the updated Doctor details, or error
	 *         message if doctor is not found.
	 */
	@PutMapping("/update-doctor")
	public ResponseEntity<?> updateDoctor(@RequestBody DoctorDto doctorDto) {
		try {
			DoctorDto updatedDoctor = doctorService.updateDoctor(doctorDto);
			return ResponseEntity.ok(updatedDoctor);
		} catch (ResourceNotFoundException e) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ApiResponse(e.getMessage()));
		} catch (ApiException e) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new ApiResponse(e.getMessage()));
		}
	}

	/**
	 * Endpoint to delete a doctor by their ID.
	 * 
	 * @param id The ID of the doctor to be deleted.
	 * @return ResponseEntity with status no content if deletion is successful, or
	 *         error message if doctor is not found.
	 */
	@DeleteMapping("/{id}")
	public ResponseEntity<?> deleteDoctor(@PathVariable Long id) {
		try {
			doctorService.deleteDoctor(id);
			return ResponseEntity.noContent().build();
		} catch (ResourceNotFoundException e) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ApiResponse(e.getMessage()));
		} catch (ApiException e) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new ApiResponse(e.getMessage()));
		}
	}
}
